CREATE INDEX INDEX_NAME ON TABLE_NAME(COLUMN_NAME)

ALTER TABLE TABLE_NAME ADD INDEX INDEX_NAME(COLUMN_NAME)


JVM 学习：

一、运行流程

	首先，java文件编译成功后产生了字节码文件（.class）,通过java + 类名的方式执行
	其次，java就会找到jre中的jvm.config，并通过-server的参数确定jvm是否可用
	接下来，找到对应的jvm.dll文件，初始化JVM，此时JVM调用JNI（java native interface）接口找到对应的.class文件
	然后，类加载器加载class文件到jvm，调用main方法，执行该程序

二、JVM的基本结构


    	class文件-------------------------类加载子系统
    											|
    											|
    											|
    											|
    	---------------------------------------------------------------------------------------
		|                                     内存空间                                         |
		|                                                                                      |
		|                                                                                      |
		|                方法区     java堆       java栈       本地方法栈                       |----------  GC
		|                                                                                      |
		|                                                                                      |
		|                                                                                      |
		----------------------------------------------------------------------------------------


三、内存空间
	方法区：存放类信息，常量，静态变量（线程共享）
	java堆：实例，（线程共享）      空间不足抛出 OutOfMemoryError
	java栈：各线程独有内存空间（私有） 空间不足抛出 StackOverflowError
	本地方法栈：类似于Java栈，只不过是执行本地方法（私有）

    PS：java堆 = 新生代 + 老年代
        新生代 = 伊甸区 + 幸存区（From区） + 幸存区（To区）
四、内存模型
	工作内存----线程私有
	主内存------线程共享

	JMM----java memory manager 内存管理机制
	工作内存 ------> 主内存   先store()，后write（）
	主内存--------->工作内存 先read(),后load()

五、可见性
	volatile ： 保证可见性  更新强制写入主内存，工作内存变量强制失效

六、指令重排序

	1. 编译器排序
	2. 指令级并行排序
	3. 内存优化排序

	2,3属于处理器重排序，需要增加内存屏障，保证逻辑

	写后写/读后写/写后读 属于JMM中不会重新排序的指令

七、JVM参数配置
	1. 跟踪参数
		监控JVM，用于故障排除，性能调优
		-XX：+printGC   打印GC信息
		-Xloggc：path  输出gc日志到path
		-XX:+TraceCalssLoading  监控类的加载
	2. 堆分配参数
		-Xms:JVM最小堆 默认系统内存的1/64，空内存>70%时缩小 直 到 Xms
		-Xmx:JVM最大堆 默认系统内存的1/4  空内存<40%时增大 直 到 Xmx
		-Xmn:新生代内存大小
		-NewRatio:新生代与老年代的比值
	3. 栈分配参数
		-Xss 通常只有几百K，决定函数的深度
八、GC算法
    （一）stop the world
        stop the world 就是JVM在进行垃圾回收的时候会暂停程序的执行，等到回收结束时，再继续程序的执行
    （二）引用计数器（GC没有用这种方法）
        原理：即对该对象引用的计数
        缺点：1.频繁计数影响性能，2.无法处理循环引用
    （三）标记清除
        原理：两个步骤：标记，清除；遍历所有GC Roots,将可达对象设置为存活对象，清除所有未标记对象
        缺点：多次遍历影响性能，产生stop the world 现象，造成内存不连续，浪费空间
    （四）标记压缩
        原理：标记清除之后进行内存压缩，解决了内存不连续的问题
        缺点：多次遍历影响性能，产生stop the world 现象
    （五）复制算法
        原理：标记-->复制-->清除；把内存一分为二，只使用其中一个，GC时，把对象复制到另一块内存去