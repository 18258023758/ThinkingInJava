DUBBO 学习
    一、特点
        按照分层的方式架构，最大限度的实现松耦合
        两个角色：服务提供方（provider），服务消费方（consumer）
    二、分层结构
        Dubbo架构共分为10层：
            1. 服务层接口层（service）：与实际业务逻辑相关，根据业务逻辑设计接口和实现
            2. 配置层（config）： 对外配置接口，以ServiceConfig（提供方）和ReferenceConfig（消费方）为中心，
                可以new配置类，也可以通过spring解析配置生成配置类
            3. 服务接口透明代理(proxy):生成服务的客户端stub和服务端skeleton，以serviceProxy为中心，扩展为ProxyFactory
            4. 服务注册层（Registry）：封装服务地址的注册与发现，以服务URL为中心，扩展接口为Registry，RegistryService和RegistryFactory
                PS：可能没有服务注册中心，此时服务提供方直接暴露服务
            5. 集群层（Cluster）：封装多个提供者的路由及负载均衡，桥接注册中心，以Invoker为中心，
                扩展接口有Router，LoadBalance，Cluster，Directory
            6. 监控层（Monitor）：RPC调用次数，时间监控，以statistics为中心，扩展接口有Monitor，MonitorService，MonitorFactory
            7. 远程调用层（Protocol）：封装RPC调用，以Invocation和result为中心，扩展接口为Protocol,Invoker,Exporter
                Protocol:服务域，Invoker暴露和引用的主功能入口，负责Invoker的生命周期管理
                Invoker：dubbo的核心模型，代表着一个可执行体，可以向他发起invoke的调用
            8. 信息交换层（Exchange）：封装请求和响应，以Request和Response为中心，
                扩展接口有ExChanger，ExchangeChannel，ExchangeClient，ExchangeServer
            9: 网络传输层（Transport）：抽象mina和netty为统一接口，以Message为中心，
                扩展接口有：Channel，Transport,Client,Server,Codec
            10.数据序列化层（Serialize）:序列化数据，扩展接口有：Serialization，ObjectInput，ObjectOutput，ThreadPool
    三、服务注册
        Multicast注册中心
        zookeeper注册中心
        redis注册中心
        Simple注册中心
    四、序列化
        hessian二进制序列化
    五、分布式事务处理方式
        1.引入可靠的消息中间件
        2.tcc事务
        TRY CONFIRM CANCEL
        TRY：完成所有业务检查（一致性），预留必须业务资源（隔离性）
        CONFIRM：TRY执行成功后，对业务进行提交
        CANCEL：TRY失败后，对业务进行回退
    六、启动时检查
        dubbo缺省会在应用启动时进行检查是否可用，如果不可用，会抛出异常，默认check="true"
    七、集群容错
        failover cluster：失败自动重换，尝试其他服务器，默认会重试两次（retries="2"）,用于读操作
        failfast cluster：只发起一次调用，失败立即抛异常，用于写操作
        failsafe cluster：失败之后忽略异常，通常用于日志记录
        failback cluster：失败自动回复，进行后台记录，定时重发，通常用于消息通知
        forking cluster：并行调用，只要有一个成功就返回，用于并发量高的情况
        broadcast cluster：广播调用所有提供者，逐个调用，有任意一台报错则报错，通知所有提供者更新
    八、负载均衡
        Random LoadBalance：随机，按权重设置随机概率
            调用量越大分布越均匀，有利于动态调整提供者的权重
        RoundRobin LoadBalance：轮询，按公约后的权重设置轮询比例
            慢的提供者会累积请求
        LeastActive LoadBalance：最少活跃调用数
            慢的提供者收到更少的请求
        ConsistentHash LoadBalance：一致性哈希，相同的请求总是发到同一个提供者去
    九、线程模型
        线程模型需要配置dispatcher和threadPool两个参数
        （一）dispatcher
            all：所有消息都发到线程池
            direct：所有消息直接在i/o线程上执行
            message：只有请求响应派发到线程池
            execution：只有请求消息派发到线程池
            connection:除了连接断开，其他消息发派到线程池
        （二）ThreadPool
            fixed：固定线程池，启动时建立线程，一直持有，不关闭
            cached：需要时创建线程，空闲一分钟后删除
            limited：持续增长的线程池，为了避免搜索是突然出现大流量引起的性能问题
    十、缓存
        lru：最近最少原则
        threadLocal：当前线程的缓存
        jcache：
    十一、事件
        onreturn，onthrow，oninvoke
        与async组合使用
    十二、流量控制
        （一）并发控制
            配置：executes（请求占用线程池） actives（占用的请求数）
        （二）连接控制
            配置：
                服务端:accepts,接收连接不能超过accepts（针对某个具体的接口）
                客户端：connections:使用连接不能超过connections（针对某个具体的接口）
    十三、附加参数（隐式参数）
    RpcContext.setAttachments();