并发学习：
    一、术语定义
        内存屏障：一组处理器指令，用于实现对内存操作顺序的限制
        缓冲行：缓存中可以分配的最小存储单位
        缓存命中：当进行高速缓存行填充操作的内存位置是处理器下次访问的地址，那么处理器从缓冲中
            获取数据写命中：当处理器将操作数写到内存缓存中，会先检查这个缓存的内存地址是否在
            缓存行中，如果存在一个有效的缓冲行，那么处理器会写到缓存中
        写缺失：一个有效的缓存行写到一个不存在的内存区域
        CAS(Compare And Swap):比较并设置，不相同时不修改
    二、锁
        （一）无锁状态
        （二）偏向锁
            等到竞争出现才会释放锁的机制，当其他线程竞争偏向锁时，持有偏向锁的线程才会释放锁
        （三）轻量级锁
        （四）重量级锁
        （五）乐观锁
            假定不会出现并发冲突，只是再提交操作的时候判断一下是否违反数据的完整性
        （六）悲观锁
            假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作
        （七）共享锁
            如果事物T对数据A加了共享锁，其他事务只能对数据A加共享锁，不能加排他锁，获取共享锁的事务只能读数据，不能写数据
        （八）排他锁
            如果事务T对数据A加了排他锁，其他事务不能对数据A加任何锁，事务T有读写权限
    三、线程池（ThreadPool）
        （一）合理使用线程池的优点
            1.降低资源消耗
            2.提高响应速度
            3.提高线程的可管理性
        （二）ThreadPoolExecutor
            1.BlockingQueue
                ArrayBlockingQueue:
                    基于数组结构的有届阻塞任务队列，FIFO
                LinkedBlockingQueue：
                    基于链表结构的阻塞任务队列，FIFO
                    Executors.newFixedThreadPool
                SynchronousQueue：
                    一个不存储元素的阻塞任务队列，每一个插入操作必须等到另一个线程调用移除操作
                    Executors.newCachedThreadPool
                PriorityBlockingQueue:
                    一个具有优先级的无限阻塞任务队列
        （三）线程池的关闭
            shutdown():将线程池的状态设置为SHUTDOWN，然后关闭所有没有正在执行的线程
            shutdownNow（）：将线程池的状态设置为STOP，遍历线程池的所有线程，调用每个执行线程的interrupt方法
        （四）ConcurrentHashMap
            锁分段技术：首先将数据分为一段段的存储，然后分别加锁
            结构：ConcurrentHashMap是由Segment和Entry构成，一个ConcurrentHashMap含有一个Segment数
                组，一个segment含有一个Entry数组
        （五）常用类
            ConcurrentHashMap：HashMap的线程安全类
            CopyOnWriteArrayList：延时懒惰策略
            CopyOnWriteArraySet:基于CopyOnWriteArrayList实现的无重复数组，每次插入都需重新遍历数据，
                                效率低于CopyOnWriteArrayList
            Atomic类：原子性操作
            ThreadPoolExecutor：线程池的实现，主要通过一些策略实现一个典型的线程池
                                AbortPolicy：对拒绝任务抛弃处理，抛出异常
                                CallerRunsPolicy：重试添加当前任务，自动调用execute方法，直到成功
                                DiscardOldPolicy：对拒绝任务不抛弃，抛弃队列中等待最久的任务，并不抛出异常
                                DiscardPolicy：对拒绝任务直接抛弃，并不抛出异常
            RejectedExecutionHandler：上述四种策略的接口

            FutureTask:异步获取数据
            Semaphore：控制对某个资源访问个数的类，例如数据库的连接池
            CyclicDownLatch：计数器
            CyclicBarrier：集合点
            Condition：控制锁在并发条件下的唤醒和等待await(),signal()